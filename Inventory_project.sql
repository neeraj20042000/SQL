--create an automated inventory database taking orders from user and updating tables accordingly
--alongwith generating bills, customer ledger, 

CREATE DATABASE INVENTORY_PROJECT;

USE INVENTORY_PROJECT;

--defining supplier table
CREATE TABLE SUPPLIER
(SID CHAR(5) PRIMARY KEY,
SNAME VARCHAR(30) NOT NULL,
SADD VARCHAR(50) NOT NULL,
SCITY VARCHAR(20) NOT NULL DEFAULT 'DELHI',
SPHONE VARCHAR(15) UNIQUE,
EMAIL VARCHAR(30));

--adding suppliers in supplier table
INSERT INTO SUPPLIER VALUES('S0001', 'RAM MATERIALS', 'DARIYAGANJ', 'DELHI', '9885576543', 'RAM@GAMIL.COM');
INSERT INTO SUPPLIER VALUES('S0002', 'VARUN METALS', 'JUHU', 'MUMBAI', '9876576556', 'VARUN@GAMIL.COM');
INSERT INTO SUPPLIER VALUES('S0003', 'BITTU PLASTICS', 'METRO ROAD', 'PUNE', '9898576543', 'BITTU@YAHOO.COM');
INSERT INTO SUPPLIER VALUES('S0004', 'MOHIT SALES', 'DHL FLY', 'GURGAON', '9876584543', 'MOHIT@GAMIL.COM');
INSERT INTO SUPPLIER VALUES('S0005', 'SHYAM FURNITURE', 'MAYUR VIHAR', 'DELHI', '9835576543', 'SHYAM@GAMIL.COM');
INSERT INTO SUPPLIER VALUES('S0006', 'KETAN MATERIALS', 'SHIVPURI', 'DELHI', '9876576543', 'KETAN@YAHOO.COM');
INSERT INTO SUPPLIER VALUES('S0007', 'SUPER PVT. LTD.', 'BANDRA', 'MUMBAI', '9870576543', 'SUPER@GAMIL.COM');

--defining prodct table
CREATE TABLE PRODUCT
(PID CHAR(5) PRIMARY KEY,
PDESC VARCHAR(30) NOT NULL,
PRICE INT CHECK(PRICE>0),
CATEGORY CHAR(2) CHECK(CATEGORY IN ('IT','HA','HC')),
SID CHAR(5) FOREIGN KEY REFERENCES SUPPLIER(SID));

--adding products in product table
INSERT INTO PRODUCT VALUES('P0001', 'SOFA', 25000, 'HA', 'S0005');
INSERT INTO PRODUCT VALUES('P0002', 'DESKTOP', 35000, 'IT', 'S0007');
INSERT INTO PRODUCT VALUES('P0003', 'MOUSE', 2000, 'IT', 'S0007');
INSERT INTO PRODUCT VALUES('P0004', 'SHAMPOO', 4000, 'HC', 'S0003');
INSERT INTO PRODUCT VALUES('P0005', 'TILES', 15000, 'HA', 'S0006');
INSERT INTO PRODUCT VALUES('P0006', 'ALMIRAH', 27000, 'HA', 'S0005');
INSERT INTO PRODUCT VALUES('P0007', 'PRINTER', 12000, 'IT', 'S0004');
INSERT INTO PRODUCT VALUES('P0008', 'CHAIR', 500, 'HA', 'S0006');
INSERT INTO PRODUCT VALUES('P0009', 'LOCKER', 25000, 'HA', 'S0002');
INSERT INTO PRODUCT VALUES('P0010', 'AIR FILTER', 30000, 'HC', 'S0001');
INSERT INTO PRODUCT VALUES('P0011', 'PURIFIER', 7000, 'HC', 'S0001');
INSERT INTO PRODUCT VALUES('P0012', 'LAPTOP', 45000, 'IT', 'S0004');
INSERT INTO PRODUCT VALUES('P0013', 'BLANKET', 12000, 'HC', 'S0004');
INSERT INTO PRODUCT VALUES('P0014', 'MASSAGER', 5000, 'HC', 'S0003');
INSERT INTO PRODUCT VALUES('P0015', 'KEYBOARD', 1500, 'IT', 'S0007');
INSERT INTO PRODUCT VALUES('P0016', 'SPEAKER', 3000, 'IT', 'S0007');
INSERT INTO PRODUCT VALUES('P0017', 'BED', 25000, 'HA', 'S0006');
INSERT INTO PRODUCT VALUES('P0018', 'DOOR HANDLE', 1700, 'HA', 'S0002');
INSERT INTO PRODUCT VALUES('P0019', 'TUBELIGHT', 1000, 'HA', 'S0005');
INSERT INTO PRODUCT VALUES('P0020', 'SCANNER', 17000, 'IT', 'S0007');

--defining stock table, SQTY is stock qunatity, ROL is reorder level, MOQ is minimum order quantity
CREATE TABLE STOCK
(PID CHAR(5) REFERENCES PRODUCT(PID),
SQTY INT CHECK(SQTY>=0),
ROL INT CHECK(ROL>0),
MOQ INT CHECK(MOQ>5));

--adding some stocks in stock table
INSERT INTO STOCK VALUES('P0003', 20, 4, 6);
INSERT INTO STOCK VALUES('P0002', 25, 7, 8);
INSERT INTO STOCK VALUES('P0006', 56, 7, 10);
INSERT INTO STOCK VALUES('P0007', 34, 6, 7);
INSERT INTO STOCK VALUES('P0004', 32, 4, 7);
INSERT INTO STOCK VALUES('P0011', 24, 7, 6);
INSERT INTO STOCK VALUES('P0014', 9, 5, 7);
INSERT INTO STOCK VALUES('P0018', 12, 6, 6);
INSERT INTO STOCK VALUES('P0017', 17, 6, 10);

--defining customer table
CREATE TABLE CUSTOMER
(CID CHAR(5) PRIMARY KEY,
CNAME VARCHAR(20) NOT NULL,
ADDRESS VARCHAR(50) NOT NULL,
CITY VARCHAR(20) NOT NULL,
PHONE VARCHAR(15) NOT NULL,
EMAIL VARCHAR(20) NOT NULL,
DOB DATE CHECK(DOB<'01-JAN-2000'));


--adding some customers in customer table
INSERT INTO CUSTOMER VALUES('C0001', 'RAHUL SHARMA', 'MAYUR VIHAR', 'DELHI', '9876789090', 'RAHUL1@GMAIL.COM', '23-JAN-1996');
INSERT INTO CUSTOMER VALUES('C0002', 'MOHIT SEN', 'JUHU', 'MUMBAI', '9876589090', 'MOHIT1@GMAIL.COM', '22-FEB-1995');
INSERT INTO CUSTOMER VALUES('C0003', 'JAI SHARMA', 'BANDRA', 'MUMBAI', '9876543090', 'JAI1@GMAIL.COM', '05-MAY-1996');
INSERT INTO CUSTOMER VALUES('C0004', 'SHYAM DUBEY', 'GOLF ROAD', 'PUNE', '9876709890', 'SHYAM1@YAHOO.COM', '23-OCT-1986');
INSERT INTO CUSTOMER VALUES('C0005', 'NEHA KAKKAR', 'CIRCLE AVENU', 'BANGLORE', '9876789090', 'NAHA1@YAHOO.COM', '21-FEB-1985');
INSERT INTO CUSTOMER VALUES('C0006', 'KUMAR SANU', 'SHANKAR VIHAR', 'DELHI', '9876223090', 'KUMAR1@GMAIL.COM', '15-JUL-1997');
INSERT INTO CUSTOMER VALUES('C0007', 'RITU JAISWAL', 'NHPC', 'FAIDABAD', '9876756490', 'RITU1@GMAIL.COM', '20-JAN-1992');

--defining order table
CREATE TABLE ORDERS
(OID CHAR(5) PRIMARY KEY,
ODATE DATE,
PID CHAR(5) FOREIGN KEY REFERENCES PRODUCT(PID),
CID CHAR(5) FOREIGN KEY REFERENCES CUSTOMER(CID),
OQTY INT CHECK(OQTY>=1));

--adding some sample orders for testing
INSERT INTO ORDERS VALUES('O0001', '26-JAN-2024', 'P0003', 'C0002', 2);
INSERT INTO ORDERS VALUES('O0002', '24-JAN-2024', 'P0006', 'C0001', 3);
INSERT INTO ORDERS VALUES('O0003', '12-MAR-2024', 'P0007', 'C0003', 4);
INSERT INTO ORDERS VALUES('O0004', '02-FEB-2024', 'P0001', 'C0006', 1);
INSERT INTO ORDERS VALUES('O0005', '16-MAR-2024', 'P0004', 'C0004', 3);

--defining purchase table (entries will be automated when stock reaches below ROL)
CREATE TABLE PURCHASE
(PID CHAR(5) FOREIGN KEY REFERENCES PRODUCT(PID),
SID CHAR(5) FOREIGN KEY REFERENCES SUPPLIER(SID),
PQTY INT CHECK(PQTY>=1),
DOP DATE);

--listing all tables
SELECT * FROM INFORMATION_SCHEMA.TABLES;

--auto increment supplier ID sequence while adding a new one
CREATE SEQUENCE SUP_SEQ
AS INT
START WITH 8
INCREMENT BY 1
MAXVALUE 999
MINVALUE 1
NO CYCLE
CACHE 5

--auto increment supplier ID function while adding a new one
CREATE FUNCTION SUP_FUNC(@CHAR AS CHAR(1), @INT AS INT)
RETURNS CHAR(5)
BEGIN
	DECLARE @ID AS CHAR(5)

	SELECT @ID=CASE
				WHEN @INT<10 THEN CONCAT(@CHAR,'000',@INT)
				WHEN @INT<100 THEN CONCAT(@CHAR,'00',@INT)
				WHEN @INT<1000 THEN CONCAT(@CHAR,'0',@INT)
				WHEN @INT<10000 THEN CONCAT(@CHAR,@INT)
				ELSE 'NA'
	END
RETURN @ID
END;

--create procedure for adding a new supplier
CREATE PROCEDURE ADD_SUPPLIER @SNAME VARCHAR(30),@SADD AS VARCHAR(50),@SCITY AS VARCHAR(20),@SPHONE AS VARCHAR(15),@SEMAIL AS VARCHAR(30)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @ID AS CHAR(5)

	SET @ID=DBO.SUP_FUNC('S',NEXT VALUE FOR SUP_SEQ)
	
	INSERT INTO SUPPLIER VALUES(@ID, @SNAME, @SADD, @SCITY, @SPHONE, @SEMAIL)

	SELECT * FROM SUPPLIER WHERE SID=@ID
END;

--test entry
ADD_SUPPLIER 'SUPER COMP', 'DWARKA', 'DELHI', '9585123543', 'SUPER@GAMIL.COM'

--auto increment product ID sequence while adding a new one
CREATE SEQUENCE PROD_SEQ
AS INT
START WITH 21
INCREMENT BY 1
MAXVALUE 999
MINVALUE 1
NO CYCLE
CACHE 5

--auto increment product ID function while adding a new one
CREATE FUNCTION PROD_FUNC(@CHAR AS CHAR(1), @INT AS INT)
RETURNS CHAR(5)
BEGIN
	DECLARE @ID AS CHAR(5)

	SELECT @ID=CASE
				WHEN @INT<10 THEN CONCAT(@CHAR,'000',@INT)
				WHEN @INT<100 THEN CONCAT(@CHAR,'00',@INT)
				WHEN @INT<1000 THEN CONCAT(@CHAR,'0',@INT)
				WHEN @INT<10000 THEN CONCAT(@CHAR,@INT)
				ELSE 'NA'
	END
RETURN @ID
END;

--create procedure for adding a new product
CREATE PROCEDURE ADD_PRODUCT @PDESC VARCHAR(30),@PRICE AS INT,@CATEGORY AS CHAR(2),@SID AS CHAR(5)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @ID AS CHAR(5)

	SET @ID=DBO.PROD_FUNC('P',NEXT VALUE FOR PROD_SEQ)

	INSERT INTO PRODUCT	VALUES(@ID, @PDESC, @PRICE, @CATEGORY, @SID)

	SELECT * FROM PRODUCT WHERE PID=@ID
END;

--test entry
ADD_PRODUCT 'MICRO_CHIP', 500, 'IT', 'S0004'

--auto increment customer ID sequence while adding a new one
CREATE SEQUENCE CUST_SEQ
AS INT
START WITH 8
INCREMENT BY 1
MAXVALUE 9999
MINVALUE 1
NO CYCLE
CACHE 5

--auto increment customer ID function while adding a new one
CREATE FUNCTION CUST_FUNC(@CHAR AS CHAR(1), @INT AS INT)
RETURNS CHAR(5)
BEGIN
	DECLARE @ID AS CHAR(5)

	SELECT @ID=CASE
				WHEN @INT<10 THEN CONCAT(@CHAR,'000',@INT)
				WHEN @INT<100 THEN CONCAT(@CHAR,'00',@INT)
				WHEN @INT<1000 THEN CONCAT(@CHAR,'0',@INT)
				WHEN @INT<10000 THEN CONCAT(@CHAR,@INT)
				ELSE 'NA'
	END
RETURN @ID
END;

--create procedure for adding a new customer
CREATE PROCEDURE ADD_CUSTOMER @CNAME VARCHAR(20),@ADDRESS AS VARCHAR(50),@CITY AS VARCHAR(20),@PHONE AS VARCHAR(15),@EMAIL AS VARCHAR(20),@DOB AS DATE
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @ID AS CHAR(5)

	SET @ID=DBO.CUST_FUNC('C',NEXT VALUE FOR CUST_SEQ)

	INSERT INTO CUSTOMER VALUES(@ID, @CNAME, @ADDRESS, @CITY, @PHONE, @EMAIL, @DOB)

	SELECT * FROM CUSTOMER WHERE CID=@ID
END;

--test entry
ADD_CUSTOMER 'RIZWAN', 'JUHU VIHAR', 'MUMBAI', '9876764090', 'RIZWAN@GMAIL.COM', '28-NOV-1995'

--auto increment order ID sequence while adding a new one
CREATE SEQUENCE ORD_SEQ
AS INT
START WITH 6
INCREMENT BY 1
MAXVALUE 9999
MINVALUE 1
NO CYCLE
CACHE 5

--auto increment order ID function while adding a new one
CREATE FUNCTION ORD_FUNC(@CHAR AS CHAR(1), @INT AS INT)
RETURNS CHAR(5)
BEGIN
	DECLARE @ID AS CHAR(5)

	SELECT @ID=CASE
				WHEN @INT<10 THEN CONCAT(@CHAR,'000',@INT)
				WHEN @INT<100 THEN CONCAT(@CHAR,'00',@INT)
				WHEN @INT<1000 THEN CONCAT(@CHAR,'0',@INT)
				WHEN @INT<10000 THEN CONCAT(@CHAR,@INT)
				ELSE 'NA'
	END
RETURN @ID
END;

--create procedure for adding a new order
CREATE PROCEDURE ADD_ORDER @PID AS CHAR(5),@CID AS CHAR(5),@OQTY AS INT
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @ID AS CHAR(5)

	SET @ID=DBO.ORD_FUNC('O',NEXT VALUE FOR ORD_SEQ)

	INSERT INTO ORDERS VALUES(@ID, CONVERT(date, GETDATE()), @PID, @CID, @OQTY)

	SELECT * FROM ORDERS WHERE OID=@ID
END;

--test entry
ADD_ORDER 'P0006', 'C0003', 3

--creating procedure for generating bill amount by order ID
CREATE PROCEDURE BILL @OID AS CHAR(5)
AS
BEGIN
	SELECT OID AS 'ORDER_ID', ODATE AS 'DATE', OQTY AS 'QUANTITY', PDESC as 'PRODUCT', PRICE, CNAME AS 'CUSTOMER_NAME', 
	CITY, PHONE, PRICE*OQTY AS 'BILL AMOUNT'
	FROM ORDERS
	INNER JOIN PRODUCT	
	ON ORDERS.PID = PRODUCT.PID
	INNER JOIN CUSTOMER
	ON ORDERS.CID = CUSTOMER.CID
	WHERE OID=@OID
END;

--test entry
BILL 'O0001'

--creating procedure for generating customer ledger by customer ID
CREATE PROCEDURE CUST_LEDGER @CID AS CHAR(5)
AS
BEGIN
	SELECT CUSTOMER.CID AS 'CUSTOMER_ID', CNAME AS 'CUSTOMER_NAME', CITY, PHONE, OID AS 'ORDER_ID', ODATE AS 'DATE', 
	OQTY AS 'QUANTITY', PDESC as 'PRODUCT', PRICE, PRICE*OQTY AS 'BILL AMOUNT'
	FROM CUSTOMER
	INNER JOIN ORDERS	
	ON CUSTOMER.CID = ORDERS.CID
	INNER JOIN PRODUCT
	ON ORDERS.PID = PRODUCT.PID
	WHERE CUSTOMER.CID=@CID
END;

--test entry
CUST_LEDGER 'C0002'

--creating procedure for generating customer daily ledger by customer ID
CREATE PROCEDURE DAILY_LEDGER @CID AS CHAR(5)
AS
BEGIN
	SELECT CUSTOMER.CID AS 'CUSTOMER_ID', CNAME AS 'CUSTOMER_NAME', CITY, PHONE, OID AS 'ORDER_ID', ODATE AS 'DATE', 
	OQTY AS 'QUANTITY', PDESC as 'PRODUCT', PRICE, PRICE*OQTY AS 'BILL AMOUNT'
	FROM CUSTOMER
	INNER JOIN ORDERS	
	ON CUSTOMER.CID = ORDERS.CID	
	INNER JOIN PRODUCT
	ON ORDERS.PID = PRODUCT.PID
	WHERE CUSTOMER.CID=@CID AND ODATE = (SELECT CONVERT(date, GETDATE()))	
END;

--test entry
DAILY_LEDGER 'C0003'

--creating procedure for generating product details by supplier ID
CREATE PROCEDURE SUPPLIER_PROD @SID AS CHAR(5)
AS
BEGIN
	SELECT SUPPLIER.SID AS 'SUPPLIER_ID', SNAME AS 'SUPPLIER_NAME', SCITY AS 'CITY', SPHONE AS 'PHONE', 
	PDESC as 'PRODUCT', PRICE, CATEGORY, SQTY AS 'QUANTITY IN STOCK'
	FROM SUPPLIER
	INNER JOIN PRODUCT	
	ON SUPPLIER.SID = PRODUCT.SID
	INNER JOIN STOCK
	ON PRODUCT.PID = STOCK.PID
	WHERE SUPPLIER.SID=@SID
END;

--test entry
SUPPLIER_PROD 'S0001'

--creating procedure for generating product in stock details by product ID
CREATE PROCEDURE PRODUCT_STOCK @PID AS CHAR(5)
AS
BEGIN
	SELECT PRODUCT.PID AS 'PRODUCT_ID', PDESC as 'PRODUCT', PRICE, CATEGORY, SQTY AS 'QUANTITY IN STOCK', 
	SNAME AS 'SUPPLIER_NAME', SCITY AS 'CITY', SPHONE AS 'PHONE'
	FROM PRODUCT
	INNER JOIN SUPPLIER	
	ON PRODUCT.SID = SUPPLIER.SID
	INNER JOIN STOCK
	ON PRODUCT.PID = STOCK.PID
	WHERE PRODUCT.PID=@PID
END;

--test entry
PRODUCT_STOCK 'P0002'

--creating procedure for generating product sale details by product ID
CREATE PROCEDURE PRODUCT_SALE @PID AS CHAR(5)
AS
BEGIN
	SELECT PRODUCT.PID AS 'PRODUCT_ID', PDESC as 'PRODUCT', PRICE, CATEGORY, 
	OID AS 'ORDER_ID', ODATE AS 'DATE', OQTY AS 'QUANTITY', PRICE*OQTY AS 'BILL AMOUNT',
	SQTY AS 'QUANTITY IN STOCK', CUSTOMER.CID AS 'CUSTOMER_ID', CNAME AS 'CUSTOMER_NAME', CITY, PHONE
	FROM PRODUCT
	INNER JOIN ORDERS	
	ON PRODUCT.PID = ORDERS.PID
	INNER JOIN STOCK
	ON PRODUCT.PID = STOCK.PID
	INNER JOIN CUSTOMER
	ON ORDERS.CID = CUSTOMER.CID
	WHERE PRODUCT.PID=@PID
END;

--test entry
PRODUCT_SALE 'P0003'

--creating trigger for auto updation of stock table on INSERT order
CREATE TRIGGER ORD_INS
ON ORDERS
FOR INSERT
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @ORD_QTY AS INT;
	DECLARE @STK_QTY AS INT;
	DECLARE @STK_NEW AS INT;
	DECLARE @ROL AS INT; -- for auto generation of purchase table row when stock reaches reorder level

	SET @ORD_QTY = (SELECT OQTY FROM INSERTED)
	SET @STK_QTY = (SELECT SQTY FROM STOCK WHERE PID = (SELECT PID FROM INSERTED));
	SET @STK_NEW = @STK_QTY - @ORD_QTY
	SET @ROL = (SELECT ROL FROM STOCK WHERE PID = (SELECT PID FROM INSERTED))

	IF @STK_QTY > @ORD_QTY
	BEGIN
		UPDATE STOCK SET SQTY = @STK_NEW
		WHERE PID = (SELECT PID FROM INSERTED);
		PRINT('ORDER ACCEPTED')
		IF @STK_NEW <= @ROL
		BEGIN			
			INSERT INTO PURCHASE VALUES(
			(SELECT PID FROM INSERTED),
			(SELECT SID FROM PRODUCT WHERE PID = (SELECT PID FROM INSERTED)),
			(SELECT MOQ FROM STOCK WHERE PID = (SELECT PID FROM INSERTED)),
			(SELECT CONVERT(date, GETDATE())))
		END;
		COMMIT;
	END;
	ELSE
	BEGIN
		ROLLBACK;
		PRINT('INSUFFICIENT QUANTITY, ORDER REJECTED')
	END;
END;

--creating trigger for auto updation of stock table on UPDATE order
CREATE TRIGGER ORD_UPD
ON ORDERS
FOR UPDATE
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @PRE_QTY AS INT;
	DECLARE @NEW_QTY AS INT;
	DECLARE @STK_QTY AS INT;
	DECLARE @STK_NEW AS INT;
	DECLARE @ROL AS INT; -- for auto generation of purchase table row when stock reaches reorder level
	
	SET @PRE_QTY = (SELECT OQTY FROM DELETED);
	SET @NEW_QTY = (SELECT OQTY FROM INSERTED);
	SET @STK_QTY = (SELECT SQTY FROM STOCK WHERE PID = (SELECT PID FROM INSERTED));
	SET @STK_NEW = @STK_QTY + @PRE_QTY - @NEW_QTY
	SET @ROL = (SELECT ROL FROM STOCK WHERE PID = (SELECT PID FROM INSERTED))

	IF @STK_QTY > (@NEW_QTY - @PRE_QTY)
	BEGIN
		UPDATE STOCK SET SQTY = SQTY + @PRE_QTY - @NEW_QTY
		WHERE PID = (SELECT PID FROM INSERTED);
		IF @STK_NEW <= @ROL
		BEGIN			
			INSERT INTO PURCHASE VALUES(
			(SELECT PID FROM INSERTED),
			(SELECT SID FROM PRODUCT WHERE PID = (SELECT PID FROM INSERTED)),
			(SELECT MOQ FROM STOCK WHERE PID = (SELECT PID FROM INSERTED)),
			(SELECT CONVERT(date, GETDATE())))
		END;
		COMMIT;
		PRINT('UPDATE ACCEPTED')
	END;
	ELSE
	BEGIN
		ROLLBACK;
		PRINT('INSUFFICIENT QUANTITY, UPDATE REJECTED')
	END;
END;

--creating trigger for auto updation of stock table on DELETE order
CREATE TRIGGER ORD_DEL
ON ORDERS
FOR DELETE
AS
BEGIN
	SET NOCOUNT ON;
	
	UPDATE STOCK SET SQTY = SQTY + (SELECT OQTY FROM DELETED)
	WHERE PID = (SELECT PID FROM DELETED);
	PRINT('ORDER DELETED')
END;

--test entry
ADD_ORDER 'P0018', 'C0004', 7
UPDATE ORDERS SET OQTY=6 WHERE OID='O0016'
DELETE FROM ORDERS WHERE OID='O0016'

SELECT * FROM ORDERS
SELECT * FROM STOCK
SELECT * FROM PURCHASE